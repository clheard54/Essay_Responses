My favorite card game by far is Set. I’m obsessed. Senior year in college, I’d come home from a night out, crash onto my bed with the deck, and play against myself. SuperSet became an addiction. To this day, a deck remains constantly in my backpack. So last Thanksgiving, when a friend of mine who was visiting told me she’d never played, I was floored. She’s a programmer (and prior teacher at Grace Hopper in New York), and I’d assumed she’d be a fellow addict. It took her no more than 10 minutes to pick up the rules and fall suspect to the contagion of my love.  Her first reaction, and one that took root in my mind far more, I imagine, than she anticipated, was one of certainty: “Clarion, you should learn to code.”

Ayana may have re-ignited my interest. But the idea of learning to code had been lying low in my mind for a time already. Always, I’ve considered myself a “math person” (though I hate that that is even an acceptable categorization). And I have spent the last four years as a high school math teacher. It’s the beauty, the elegance, and the creativity of math that enthralls me. G.H. Hardy’s description rings most true (and I aspire to its truth): “A mathematician, like a painter or poet, is a maker of patterns. If his patterns are more permanent than theirs, it is because they are made with ideas.” Playing with patterns, letting my imagination run free within a set of known boundaries, exploring the unavoidable results of these patterns and where they lead -- that, to me, is a joyful experiment. The freedom appeals to me: Perhaps driven by an abstract question or ultimate goal, the process itself remains open-ended, the only limitations being my ability (or willingness) to imagine different paths through some minimal scaffolding. Where to climb next? What tool do I need to grab from my toolbox? My notion of intellectual challenge and stimulation is finding simplicity amidst seeming chaos, tinkering and streamlining, asking simple and elegant questions and crafting the most elegant, incisive, and beautiful explanations. 

From what I hear, programming is a natural extension of this type of thinking. There’s a strict logic providing a framework, a structure. A language dictates certain rules of syntax and communication. But beyond that, it’s a wide open puzzle. I imagine a playground, a jungle-gym, one that I can play in as I wish. Yes, certain conventions and guidelines exist; but nothing stops me from determining a new way across the monkey-bars. The "point," if there must be one, is the process. Achieving some product by brute force doesn't count. It’s about the how : How to nimbly navigate from point A to point B, how to do it with elegance and efficiency. I want to pierce through ambiguity with decisiveness. I want to learn to ask a machine to run extremely complex algorithms with simplicity. I want to revel in those clean-cut solutions that emerge from the fog of uncertainty, of experimentation, of seemingly-blind blundering that finally comes to fruition. 

I also think code is the language of the future. I’d be lying if I pretended that the current, seemingly-widespread opportunities in software engineering and programming weren't a pull. Learning to code seems a necessary step in my path forward; it seems to be a more and more critical skill in our tech-reliant world. Right now, I'm too ignorant for my own liking (or comfort). I’ve dabbled in Code Academy, and attempted to teach myself Python, Java, and Ruby with its courses. I say "attempted": I have completed those courses, and while I found myself able to do each lesson relatively easily, I don't feel I have any real idea of how to apply those skills in a broader context. And without the practice of actually solving a problem or building a program, I feel I haven't actually gained much ground.  

I suppose that since I'm a teacher, it's unsurprising that I'm a firm believer in the power of learning from another breathing person. The kind of intensive, highly relational, and interpersonal education that Ada provides strikes a deep chord in me. It seems only right that an emphasis on community offers a foundation for y'all. From what I know, programming is a realm in which independence and creativity must blend seamlessly with collaboration. A recognition of individual voice coexists with an emphasis on collective effort. I want to find a place where a feeling of support and camaraderie is what makes it okay for me to take that occassional, spontaneous, self-believing plunge, the leap of faith required to cross the chasm of uncertainty and find truth.
